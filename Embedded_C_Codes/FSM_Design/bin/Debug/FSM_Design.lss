
bin\Debug\FSM_Design.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000004e4  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000060  00000000  00000000  000004e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c1  00000000  00000000  00000547  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002b0  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001aa  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000393  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000124  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  88:	0c 94 26 02 	jmp	0x44c	; 0x44c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Delay_Timer>:
#include <avr/interrupt.h>

volatile unsigned int Counter=0;

void Delay_Timer(int count1)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	00 d0       	rcall	.+0      	; 0x96 <Delay_Timer+0x6>
  96:	00 d0       	rcall	.+0      	; 0x98 <Delay_Timer+0x8>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	9a 83       	std	Y+2, r25	; 0x02
  9e:	89 83       	std	Y+1, r24	; 0x01
    Counter=0;
  a0:	10 92 01 01 	sts	0x0101, r1
  a4:	10 92 00 01 	sts	0x0100, r1
    count1=count1/16;
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	9c 83       	std	Y+4, r25	; 0x04
  ae:	8b 83       	std	Y+3, r24	; 0x03
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	9c 81       	ldd	r25, Y+4	; 0x04
  b4:	99 23       	and	r25, r25
  b6:	2c f4       	brge	.+10     	; 0xc2 <Delay_Timer+0x32>
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	9c 81       	ldd	r25, Y+4	; 0x04
  bc:	0f 96       	adiw	r24, 0x0f	; 15
  be:	9c 83       	std	Y+4, r25	; 0x04
  c0:	8b 83       	std	Y+3, r24	; 0x03
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	9c 81       	ldd	r25, Y+4	; 0x04
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	95 95       	asr	r25
  d0:	87 95       	ror	r24
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	9a 83       	std	Y+2, r25	; 0x02
  d8:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(TCCR0A,WGM00);
  da:	a4 e4       	ldi	r26, 0x44	; 68
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e4 e4       	ldi	r30, 0x44	; 68
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	8c 93       	st	X, r24
    CLR_BIT(TCCR0A,WGM01);
  e8:	a4 e4       	ldi	r26, 0x44	; 68
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e4 e4       	ldi	r30, 0x44	; 68
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B,WGM02);
  f6:	a5 e4       	ldi	r26, 0x45	; 69
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e5 e4       	ldi	r30, 0x45	; 69
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	87 7f       	andi	r24, 0xF7	; 247
 102:	8c 93       	st	X, r24
    SET_BIT(TCCR0B,CS00);
 104:	a5 e4       	ldi	r26, 0x45	; 69
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e5 e4       	ldi	r30, 0x45	; 69
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B,CS01);
 112:	a5 e4       	ldi	r26, 0x45	; 69
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e5 e4       	ldi	r30, 0x45	; 69
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	8c 93       	st	X, r24
    SET_BIT(TCCR0B,CS02);
 120:	a5 e4       	ldi	r26, 0x45	; 69
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e5 e4       	ldi	r30, 0x45	; 69
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8c 93       	st	X, r24
    TCNT0=0;
 12e:	e6 e4       	ldi	r30, 0x46	; 70
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	10 82       	st	Z, r1
    SET_BIT(TIMSK0,TOIE0);
 134:	ae e6       	ldi	r26, 0x6E	; 110
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	ee e6       	ldi	r30, 0x6E	; 110
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	8c 93       	st	X, r24
    while(Counter<count1){}
 142:	29 81       	ldd	r18, Y+1	; 0x01
 144:	3a 81       	ldd	r19, Y+2	; 0x02
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	90 91 01 01 	lds	r25, 0x0101
 14e:	82 17       	cp	r24, r18
 150:	93 07       	cpc	r25, r19
 152:	b8 f3       	brcs	.-18     	; 0x142 <Delay_Timer+0xb2>

}
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	af 93       	push	r26
 172:	bf 93       	push	r27
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
 178:	df 93       	push	r29
 17a:	cf 93       	push	r28
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
    cli();
 180:	f8 94       	cli
    Counter++;
 182:	80 91 00 01 	lds	r24, 0x0100
 186:	90 91 01 01 	lds	r25, 0x0101
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 01 01 	sts	0x0101, r25
 190:	80 93 00 01 	sts	0x0100, r24
    CLR_BIT(TIFR0,TOV0);
 194:	a5 e3       	ldi	r26, 0x35	; 53
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e5 e3       	ldi	r30, 0x35	; 53
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	8c 93       	st	X, r24
    sei();
 1a2:	78 94       	sei

}
 1a4:	cf 91       	pop	r28
 1a6:	df 91       	pop	r29
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <main>:
 */

#include "FSMHeader.h"

int main(void)
{
 1be:	df 93       	push	r29
 1c0:	cf 93       	push	r28
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62

    // GPIO Configurations
    SET_BIT(DDRC,PC5);
 1c6:	a7 e2       	ldi	r26, 0x27	; 39
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	e7 e2       	ldi	r30, 0x27	; 39
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	8c 93       	st	X, r24
    SET_BIT(PORTC,PC5);
 1d4:	a8 e2       	ldi	r26, 0x28	; 40
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e8 e2       	ldi	r30, 0x28	; 40
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	8c 93       	st	X, r24
    SET_BIT(DDRC,PC6);
 1e2:	a7 e2       	ldi	r26, 0x27	; 39
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e7 e2       	ldi	r30, 0x27	; 39
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	8c 93       	st	X, r24
    SET_BIT(PORTC,PC6);
 1f0:	a8 e2       	ldi	r26, 0x28	; 40
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e8 e2       	ldi	r30, 0x28	; 40
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	80 64       	ori	r24, 0x40	; 64
 1fc:	8c 93       	st	X, r24
    CLR_BIT(DDRB,PB0);
 1fe:	a4 e2       	ldi	r26, 0x24	; 36
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e4 e2       	ldi	r30, 0x24	; 36
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	8c 93       	st	X, r24
    SET_BIT(PORTB,PB0);
 20c:	a5 e2       	ldi	r26, 0x25	; 37
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e5 e2       	ldi	r30, 0x25	; 37
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	81 60       	ori	r24, 0x01	; 1
 218:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PD6);
 21a:	aa e2       	ldi	r26, 0x2A	; 42
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	ea e2       	ldi	r30, 0x2A	; 42
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	8f 7b       	andi	r24, 0xBF	; 191
 226:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD6);
 228:	ab e2       	ldi	r26, 0x2B	; 43
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	eb e2       	ldi	r30, 0x2B	; 43
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 64       	ori	r24, 0x40	; 64
 234:	8c 93       	st	X, r24

    //Interrupt Configurations
    SET_BIT(SREG,7);
 236:	af e5       	ldi	r26, 0x5F	; 95
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	ef e5       	ldi	r30, 0x5F	; 95
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 68       	ori	r24, 0x80	; 128
 242:	8c 93       	st	X, r24
    SET_BIT(PCICR,PCIE0);
 244:	a8 e6       	ldi	r26, 0x68	; 104
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e8 e6       	ldi	r30, 0x68	; 104
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	81 60       	ori	r24, 0x01	; 1
 250:	8c 93       	st	X, r24
    SET_BIT(PCMSK0,PCINT0);
 252:	ab e6       	ldi	r26, 0x6B	; 107
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	eb e6       	ldi	r30, 0x6B	; 107
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	81 60       	ori	r24, 0x01	; 1
 25e:	8c 93       	st	X, r24
    SET_BIT(PCICR,PCIE2);
 260:	a8 e6       	ldi	r26, 0x68	; 104
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	e8 e6       	ldi	r30, 0x68	; 104
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	84 60       	ori	r24, 0x04	; 4
 26c:	8c 93       	st	X, r24
    SET_BIT(PCMSK2,PCINT22);
 26e:	ad e6       	ldi	r26, 0x6D	; 109
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	ed e6       	ldi	r30, 0x6D	; 109
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 64       	ori	r24, 0x40	; 64
 27a:	8c 93       	st	X, r24

    State_FSM();
 27c:	0e 94 45 01 	call	0x28a	; 0x28a <State_FSM>

    return 0;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
}
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <State_FSM>:
#include "FSMHeader.h"
#include "StateHeader.h"

void State_FSM()
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
    FLAG_BIT.flag1=0;
 292:	80 91 02 01 	lds	r24, 0x0102
 296:	8e 7f       	andi	r24, 0xFE	; 254
 298:	80 93 02 01 	sts	0x0102, r24
    FLAG_BIT.flag2=0;
 29c:	80 91 02 01 	lds	r24, 0x0102
 2a0:	8d 7f       	andi	r24, 0xFD	; 253
 2a2:	80 93 02 01 	sts	0x0102, r24
    while(1)
    {
        if (FLAG_BIT.flag1==0 && FLAG_BIT.flag2==1)
 2a6:	80 91 02 01 	lds	r24, 0x0102
 2aa:	81 70       	andi	r24, 0x01	; 1
 2ac:	88 23       	and	r24, r24
 2ae:	a1 f4       	brne	.+40     	; 0x2d8 <State_FSM+0x4e>
 2b0:	80 91 02 01 	lds	r24, 0x0102
 2b4:	82 70       	andi	r24, 0x02	; 2
 2b6:	88 23       	and	r24, r24
 2b8:	79 f0       	breq	.+30     	; 0x2d8 <State_FSM+0x4e>
        {
            CLR_BIT(PORTC,PC5);
 2ba:	a8 e2       	ldi	r26, 0x28	; 40
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	e8 e2       	ldi	r30, 0x28	; 40
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	8c 93       	st	X, r24
            CLR_BIT(PORTC,PC6);
 2c8:	a8 e2       	ldi	r26, 0x28	; 40
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e8 e2       	ldi	r30, 0x28	; 40
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	8f 7b       	andi	r24, 0xBF	; 191
 2d4:	8c 93       	st	X, r24
 2d6:	e7 cf       	rjmp	.-50     	; 0x2a6 <State_FSM+0x1c>
        }
        else if (FLAG_BIT.flag1==1 && FLAG_BIT.flag2==0)
 2d8:	80 91 02 01 	lds	r24, 0x0102
 2dc:	81 70       	andi	r24, 0x01	; 1
 2de:	88 23       	and	r24, r24
 2e0:	a1 f0       	breq	.+40     	; 0x30a <State_FSM+0x80>
 2e2:	80 91 02 01 	lds	r24, 0x0102
 2e6:	82 70       	andi	r24, 0x02	; 2
 2e8:	88 23       	and	r24, r24
 2ea:	79 f4       	brne	.+30     	; 0x30a <State_FSM+0x80>
        {
            SET_BIT(PORTC,PC5);
 2ec:	a8 e2       	ldi	r26, 0x28	; 40
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e8 e2       	ldi	r30, 0x28	; 40
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	80 62       	ori	r24, 0x20	; 32
 2f8:	8c 93       	st	X, r24
            SET_BIT(PORTC,PC6);
 2fa:	a8 e2       	ldi	r26, 0x28	; 40
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e8 e2       	ldi	r30, 0x28	; 40
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	80 64       	ori	r24, 0x40	; 64
 306:	8c 93       	st	X, r24
 308:	ce cf       	rjmp	.-100    	; 0x2a6 <State_FSM+0x1c>
        }
        else if (FLAG_BIT.flag1==0 && FLAG_BIT.flag2==0)
 30a:	80 91 02 01 	lds	r24, 0x0102
 30e:	81 70       	andi	r24, 0x01	; 1
 310:	88 23       	and	r24, r24
 312:	49 f6       	brne	.-110    	; 0x2a6 <State_FSM+0x1c>
 314:	80 91 02 01 	lds	r24, 0x0102
 318:	82 70       	andi	r24, 0x02	; 2
 31a:	88 23       	and	r24, r24
 31c:	21 f6       	brne	.-120    	; 0x2a6 <State_FSM+0x1c>
        {
            TOGGLE_BIT(PORTC,PC5);
 31e:	a8 e2       	ldi	r26, 0x28	; 40
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e2       	ldi	r30, 0x28	; 40
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	80 e2       	ldi	r24, 0x20	; 32
 32a:	89 27       	eor	r24, r25
 32c:	8c 93       	st	X, r24
            TOGGLE_BIT(PORTC,PC6);
 32e:	a8 e2       	ldi	r26, 0x28	; 40
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e8 e2       	ldi	r30, 0x28	; 40
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	90 81       	ld	r25, Z
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	89 27       	eor	r24, r25
 33c:	8c 93       	st	X, r24
            Delay_Timer(1000);
 33e:	88 ee       	ldi	r24, 0xE8	; 232
 340:	93 e0       	ldi	r25, 0x03	; 3
 342:	0e 94 48 00 	call	0x90	; 0x90 <Delay_Timer>
 346:	af cf       	rjmp	.-162    	; 0x2a6 <State_FSM+0x1c>

00000348 <__vector_3>:

    }
}

ISR(PCINT0_vect)
{
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
    cli();
 35e:	f8 94       	cli
    if(FLAG_BIT.flag1==0 && FLAG_BIT.flag2==0)
 360:	80 91 02 01 	lds	r24, 0x0102
 364:	81 70       	andi	r24, 0x01	; 1
 366:	88 23       	and	r24, r24
 368:	99 f4       	brne	.+38     	; 0x390 <__vector_3+0x48>
 36a:	80 91 02 01 	lds	r24, 0x0102
 36e:	82 70       	andi	r24, 0x02	; 2
 370:	88 23       	and	r24, r24
 372:	71 f4       	brne	.+28     	; 0x390 <__vector_3+0x48>
        FLAG_BIT.flag1=~FLAG_BIT.flag1;
 374:	80 91 02 01 	lds	r24, 0x0102
 378:	81 70       	andi	r24, 0x01	; 1
 37a:	80 95       	com	r24
 37c:	81 70       	andi	r24, 0x01	; 1
 37e:	98 2f       	mov	r25, r24
 380:	91 70       	andi	r25, 0x01	; 1
 382:	80 91 02 01 	lds	r24, 0x0102
 386:	8e 7f       	andi	r24, 0xFE	; 254
 388:	89 2b       	or	r24, r25
 38a:	80 93 02 01 	sts	0x0102, r24
 38e:	2c c0       	rjmp	.+88     	; 0x3e8 <__vector_3+0xa0>
    else if(FLAG_BIT.flag1==0 && FLAG_BIT.flag2==1)
 390:	80 91 02 01 	lds	r24, 0x0102
 394:	81 70       	andi	r24, 0x01	; 1
 396:	88 23       	and	r24, r24
 398:	99 f4       	brne	.+38     	; 0x3c0 <__vector_3+0x78>
 39a:	80 91 02 01 	lds	r24, 0x0102
 39e:	82 70       	andi	r24, 0x02	; 2
 3a0:	88 23       	and	r24, r24
 3a2:	71 f0       	breq	.+28     	; 0x3c0 <__vector_3+0x78>
        FLAG_BIT.flag1=~FLAG_BIT.flag1;
 3a4:	80 91 02 01 	lds	r24, 0x0102
 3a8:	81 70       	andi	r24, 0x01	; 1
 3aa:	80 95       	com	r24
 3ac:	81 70       	andi	r24, 0x01	; 1
 3ae:	98 2f       	mov	r25, r24
 3b0:	91 70       	andi	r25, 0x01	; 1
 3b2:	80 91 02 01 	lds	r24, 0x0102
 3b6:	8e 7f       	andi	r24, 0xFE	; 254
 3b8:	89 2b       	or	r24, r25
 3ba:	80 93 02 01 	sts	0x0102, r24
 3be:	14 c0       	rjmp	.+40     	; 0x3e8 <__vector_3+0xa0>
    else if(FLAG_BIT.flag1==1 && FLAG_BIT.flag2==1)
 3c0:	80 91 02 01 	lds	r24, 0x0102
 3c4:	81 70       	andi	r24, 0x01	; 1
 3c6:	88 23       	and	r24, r24
 3c8:	79 f0       	breq	.+30     	; 0x3e8 <__vector_3+0xa0>
 3ca:	80 91 02 01 	lds	r24, 0x0102
 3ce:	82 70       	andi	r24, 0x02	; 2
 3d0:	88 23       	and	r24, r24
 3d2:	51 f0       	breq	.+20     	; 0x3e8 <__vector_3+0xa0>
    {
        FLAG_BIT.flag1=0;
 3d4:	80 91 02 01 	lds	r24, 0x0102
 3d8:	8e 7f       	andi	r24, 0xFE	; 254
 3da:	80 93 02 01 	sts	0x0102, r24
        FLAG_BIT.flag2=0;
 3de:	80 91 02 01 	lds	r24, 0x0102
 3e2:	8d 7f       	andi	r24, 0xFD	; 253
 3e4:	80 93 02 01 	sts	0x0102, r24
    }
    sei();
 3e8:	78 94       	sei
}
 3ea:	cf 91       	pop	r28
 3ec:	df 91       	pop	r29
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <__vector_5>:

ISR(PCINT2_vect)
{
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	8f 93       	push	r24
 408:	df 93       	push	r29
 40a:	cf 93       	push	r28
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
    cli();
 410:	f8 94       	cli
    if(FLAG_BIT.flag1==1 && FLAG_BIT.flag2==0)
 412:	80 91 02 01 	lds	r24, 0x0102
 416:	81 70       	andi	r24, 0x01	; 1
 418:	88 23       	and	r24, r24
 41a:	79 f0       	breq	.+30     	; 0x43a <__vector_5+0x3e>
 41c:	80 91 02 01 	lds	r24, 0x0102
 420:	82 70       	andi	r24, 0x02	; 2
 422:	88 23       	and	r24, r24
 424:	51 f4       	brne	.+20     	; 0x43a <__vector_5+0x3e>
    {
        FLAG_BIT.flag1=0;
 426:	80 91 02 01 	lds	r24, 0x0102
 42a:	8e 7f       	andi	r24, 0xFE	; 254
 42c:	80 93 02 01 	sts	0x0102, r24
        FLAG_BIT.flag2=1;
 430:	80 91 02 01 	lds	r24, 0x0102
 434:	82 60       	ori	r24, 0x02	; 2
 436:	80 93 02 01 	sts	0x0102, r24
    }
    sei();
 43a:	78 94       	sei
}
 43c:	cf 91       	pop	r28
 43e:	df 91       	pop	r29
 440:	8f 91       	pop	r24
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
