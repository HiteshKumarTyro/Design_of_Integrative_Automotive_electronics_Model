
bin\Debug\CTC_PWM_gen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  0000043a  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  0000043d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000072  00000000  00000000  0000045d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001b3  00000000  00000000  000004cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000103  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000293  00000000  00000000  00000785  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000102  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
    volatile unsigned int flag2:1;

}FLAG_BIT;

int main(void)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62

    // GPIO Configurations
    SET_BIT(DDRD,PD6);
  98:	aa e2       	ldi	r26, 0x2A	; 42
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	ea e2       	ldi	r30, 0x2A	; 42
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	8c 93       	st	X, r24
    CLR_BIT(PORTD,PD6);
  a6:	ab e2       	ldi	r26, 0x2B	; 43
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	eb e2       	ldi	r30, 0x2B	; 43
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8f 7b       	andi	r24, 0xBF	; 191
  b2:	8c 93       	st	X, r24
    SET_BIT(DDRC,PC5);
  b4:	a7 e2       	ldi	r26, 0x27	; 39
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e7 e2       	ldi	r30, 0x27	; 39
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	8c 93       	st	X, r24
    CLR_BIT(PORTC,PC5);
  c2:	a8 e2       	ldi	r26, 0x28	; 40
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e8 e2       	ldi	r30, 0x28	; 40
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 7d       	andi	r24, 0xDF	; 223
  ce:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PD2);
  d0:	aa e2       	ldi	r26, 0x2A	; 42
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	ea e2       	ldi	r30, 0x2A	; 42
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD2);
  de:	ab e2       	ldi	r26, 0x2B	; 43
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	eb e2       	ldi	r30, 0x2B	; 43
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	8c 93       	st	X, r24
    CLR_BIT(DDRD,PD7);
  ec:	aa e2       	ldi	r26, 0x2A	; 42
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ea e2       	ldi	r30, 0x2A	; 42
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD7);
  fa:	ab e2       	ldi	r26, 0x2B	; 43
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	eb e2       	ldi	r30, 0x2B	; 43
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8c 93       	st	X, r24
    CLR_BIT(DDRB,PB2);
 108:	a4 e2       	ldi	r26, 0x24	; 36
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e4 e2       	ldi	r30, 0x24	; 36
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	8c 93       	st	X, r24
    SET_BIT(PORTB,PB2);
 116:	a5 e2       	ldi	r26, 0x25	; 37
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	e5 e2       	ldi	r30, 0x25	; 37
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	84 60       	ori	r24, 0x04	; 4
 122:	8c 93       	st	X, r24

    //External Interrupt Configurations
    SET_BIT(SREG,7);
 124:	af e5       	ldi	r26, 0x5F	; 95
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ef e5       	ldi	r30, 0x5F	; 95
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	8c 93       	st	X, r24
    SET_BIT(EICRA,ISC00);
 132:	a9 e6       	ldi	r26, 0x69	; 105
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e9 e6       	ldi	r30, 0x69	; 105
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	8c 93       	st	X, r24
    CLR_BIT(EICRA,ISC01);
 140:	a9 e6       	ldi	r26, 0x69	; 105
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e9 e6       	ldi	r30, 0x69	; 105
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8d 7f       	andi	r24, 0xFD	; 253
 14c:	8c 93       	st	X, r24
    SET_BIT(EIMSK,INT0);
 14e:	ad e3       	ldi	r26, 0x3D	; 61
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	ed e3       	ldi	r30, 0x3D	; 61
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	8c 93       	st	X, r24

    //Internal Interrupt Configurations
    SET_BIT(PCICR,PCIE0);
 15c:	a8 e6       	ldi	r26, 0x68	; 104
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e8 e6       	ldi	r30, 0x68	; 104
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	8c 93       	st	X, r24
    SET_BIT(PCMSK0,PCINT2);
 16a:	ab e6       	ldi	r26, 0x6B	; 107
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	eb e6       	ldi	r30, 0x6B	; 107
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	84 60       	ori	r24, 0x04	; 4
 176:	8c 93       	st	X, r24
    SET_BIT(PCICR,PCIE2);
 178:	a8 e6       	ldi	r26, 0x68	; 104
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e8 e6       	ldi	r30, 0x68	; 104
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	84 60       	ori	r24, 0x04	; 4
 184:	8c 93       	st	X, r24
    SET_BIT(PCMSK2,PCINT23);
 186:	ad e6       	ldi	r26, 0x6D	; 109
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	ed e6       	ldi	r30, 0x6D	; 109
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 68       	ori	r24, 0x80	; 128
 192:	8c 93       	st	X, r24

    //FAST PWM Mode
    SET_BIT(TCCR0A,WGM00);
 194:	a4 e4       	ldi	r26, 0x44	; 68
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e4 e4       	ldi	r30, 0x44	; 68
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	8c 93       	st	X, r24
    SET_BIT(TCCR0A,WGM01);
 1a2:	a4 e4       	ldi	r26, 0x44	; 68
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e4 e4       	ldi	r30, 0x44	; 68
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B,WGM02);
 1b0:	a5 e4       	ldi	r26, 0x45	; 69
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e5 e4       	ldi	r30, 0x45	; 69
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	87 7f       	andi	r24, 0xF7	; 247
 1bc:	8c 93       	st	X, r24

    //Inverting Mode
    SET_BIT(TCCR0A,COM0A1);
 1be:	a4 e4       	ldi	r26, 0x44	; 68
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e4 e4       	ldi	r30, 0x44	; 68
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	8c 93       	st	X, r24
    SET_BIT(TCCR0A,COM0A0);
 1cc:	a4 e4       	ldi	r26, 0x44	; 68
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e4 e4       	ldi	r30, 0x44	; 68
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	8c 93       	st	X, r24

    //Prescelar Selection
    SET_BIT(TCCR0B,CS00);
 1da:	a5 e4       	ldi	r26, 0x45	; 69
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	e5 e4       	ldi	r30, 0x45	; 69
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B,CS01);
 1e8:	a5 e4       	ldi	r26, 0x45	; 69
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	e5 e4       	ldi	r30, 0x45	; 69
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8d 7f       	andi	r24, 0xFD	; 253
 1f4:	8c 93       	st	X, r24
    SET_BIT(TCCR0B,CS02);
 1f6:	a5 e4       	ldi	r26, 0x45	; 69
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	e5 e4       	ldi	r30, 0x45	; 69
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	84 60       	ori	r24, 0x04	; 4
 202:	8c 93       	st	X, r24

    TCNT0=0;
 204:	e6 e4       	ldi	r30, 0x46	; 70
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	10 82       	st	Z, r1
    OCR0A=255;
 20a:	e7 e4       	ldi	r30, 0x47	; 71
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	80 83       	st	Z, r24
    FLAG_BIT.flag0=1;
 212:	80 91 00 01 	lds	r24, 0x0100
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 93 00 01 	sts	0x0100, r24
    FLAG_BIT.flag1=1;
 21c:	80 91 00 01 	lds	r24, 0x0100
 220:	82 60       	ori	r24, 0x02	; 2
 222:	80 93 00 01 	sts	0x0100, r24
    FLAG_BIT.flag2=1;
 226:	80 91 00 01 	lds	r24, 0x0100
 22a:	84 60       	ori	r24, 0x04	; 4
 22c:	80 93 00 01 	sts	0x0100, r24
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x1a0>

00000232 <__vector_3>:

    return 0;
}

ISR(PCINT0_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
    cli();
 24c:	f8 94       	cli
    if(FLAG_BIT.flag0==1)
 24e:	80 91 00 01 	lds	r24, 0x0100
 252:	81 70       	andi	r24, 0x01	; 1
 254:	88 23       	and	r24, r24
 256:	91 f0       	breq	.+36     	; 0x27c <__vector_3+0x4a>
    {
        OCR0A=179;
 258:	e7 e4       	ldi	r30, 0x47	; 71
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	83 eb       	ldi	r24, 0xB3	; 179
 25e:	80 83       	st	Z, r24
        FLAG_BIT.flag0=~FLAG_BIT.flag0;
 260:	80 91 00 01 	lds	r24, 0x0100
 264:	81 70       	andi	r24, 0x01	; 1
 266:	80 95       	com	r24
 268:	81 70       	andi	r24, 0x01	; 1
 26a:	98 2f       	mov	r25, r24
 26c:	91 70       	andi	r25, 0x01	; 1
 26e:	80 91 00 01 	lds	r24, 0x0100
 272:	8e 7f       	andi	r24, 0xFE	; 254
 274:	89 2b       	or	r24, r25
 276:	80 93 00 01 	sts	0x0100, r24
 27a:	1b c0       	rjmp	.+54     	; 0x2b2 <__vector_3+0x80>
    }
    else if(FLAG_BIT.flag0==0 && FLAG_BIT.flag1==0)
 27c:	80 91 00 01 	lds	r24, 0x0100
 280:	81 70       	andi	r24, 0x01	; 1
 282:	88 23       	and	r24, r24
 284:	b1 f4       	brne	.+44     	; 0x2b2 <__vector_3+0x80>
 286:	80 91 00 01 	lds	r24, 0x0100
 28a:	82 70       	andi	r24, 0x02	; 2
 28c:	88 23       	and	r24, r24
 28e:	89 f4       	brne	.+34     	; 0x2b2 <__vector_3+0x80>
    {
        OCR0A=255;
 290:	e7 e4       	ldi	r30, 0x47	; 71
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	80 83       	st	Z, r24
        FLAG_BIT.flag0=~FLAG_BIT.flag0;
 298:	80 91 00 01 	lds	r24, 0x0100
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	80 95       	com	r24
 2a0:	81 70       	andi	r24, 0x01	; 1
 2a2:	98 2f       	mov	r25, r24
 2a4:	91 70       	andi	r25, 0x01	; 1
 2a6:	80 91 00 01 	lds	r24, 0x0100
 2aa:	8e 7f       	andi	r24, 0xFE	; 254
 2ac:	89 2b       	or	r24, r25
 2ae:	80 93 00 01 	sts	0x0100, r24
    }
    sei();
 2b2:	78 94       	sei
}
 2b4:	cf 91       	pop	r28
 2b6:	df 91       	pop	r29
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_5>:

ISR(PCINT2_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
 2dc:	df 93       	push	r29
 2de:	cf 93       	push	r28
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
    cli();
 2e4:	f8 94       	cli
    if(FLAG_BIT.flag1==1)
 2e6:	80 91 00 01 	lds	r24, 0x0100
 2ea:	82 70       	andi	r24, 0x02	; 2
 2ec:	88 23       	and	r24, r24
 2ee:	a1 f0       	breq	.+40     	; 0x318 <__vector_5+0x4e>
    {
        OCR0A=89;
 2f0:	e7 e4       	ldi	r30, 0x47	; 71
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	89 e5       	ldi	r24, 0x59	; 89
 2f6:	80 83       	st	Z, r24
        FLAG_BIT.flag1=~FLAG_BIT.flag1;
 2f8:	80 91 00 01 	lds	r24, 0x0100
 2fc:	86 95       	lsr	r24
 2fe:	81 70       	andi	r24, 0x01	; 1
 300:	80 95       	com	r24
 302:	81 70       	andi	r24, 0x01	; 1
 304:	81 70       	andi	r24, 0x01	; 1
 306:	98 2f       	mov	r25, r24
 308:	99 0f       	add	r25, r25
 30a:	80 91 00 01 	lds	r24, 0x0100
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	89 2b       	or	r24, r25
 312:	80 93 00 01 	sts	0x0100, r24
 316:	1d c0       	rjmp	.+58     	; 0x352 <__vector_5+0x88>
    }
    else if(FLAG_BIT.flag1==0 && FLAG_BIT.flag1==0)
 318:	80 91 00 01 	lds	r24, 0x0100
 31c:	82 70       	andi	r24, 0x02	; 2
 31e:	88 23       	and	r24, r24
 320:	c1 f4       	brne	.+48     	; 0x352 <__vector_5+0x88>
 322:	80 91 00 01 	lds	r24, 0x0100
 326:	82 70       	andi	r24, 0x02	; 2
 328:	88 23       	and	r24, r24
 32a:	99 f4       	brne	.+38     	; 0x352 <__vector_5+0x88>
    {
        OCR0A=255;
 32c:	e7 e4       	ldi	r30, 0x47	; 71
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	80 83       	st	Z, r24
        FLAG_BIT.flag1=~FLAG_BIT.flag1;
 334:	80 91 00 01 	lds	r24, 0x0100
 338:	86 95       	lsr	r24
 33a:	81 70       	andi	r24, 0x01	; 1
 33c:	80 95       	com	r24
 33e:	81 70       	andi	r24, 0x01	; 1
 340:	81 70       	andi	r24, 0x01	; 1
 342:	98 2f       	mov	r25, r24
 344:	99 0f       	add	r25, r25
 346:	80 91 00 01 	lds	r24, 0x0100
 34a:	8d 7f       	andi	r24, 0xFD	; 253
 34c:	89 2b       	or	r24, r25
 34e:	80 93 00 01 	sts	0x0100, r24
    }
    sei();
 352:	78 94       	sei
}
 354:	cf 91       	pop	r28
 356:	df 91       	pop	r29
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_1>:

ISR(INT0_vect)
{
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	8f 93       	push	r24
 376:	ef 93       	push	r30
 378:	ff 93       	push	r31
 37a:	df 93       	push	r29
 37c:	cf 93       	push	r28
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
    cli();
 382:	f8 94       	cli
    OCR0A=255;
 384:	e7 e4       	ldi	r30, 0x47	; 71
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	80 83       	st	Z, r24
    sei();
 38c:	78 94       	sei
}
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	8f 91       	pop	r24
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
