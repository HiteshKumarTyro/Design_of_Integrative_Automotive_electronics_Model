
bin\Debug\IntR_Prjct1_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  00000316  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000040  00000000  00000000  00000319  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009f  00000000  00000000  00000359  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027a  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b3  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000106  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  88:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Delay_Timer>:
#include "Intrheader.h"

volatile unsigned int Counter=0;

void Delay_Timer(int count1)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	00 d0       	rcall	.+0      	; 0x96 <Delay_Timer+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	9a 83       	std	Y+2, r25	; 0x02
  9c:	89 83       	std	Y+1, r24	; 0x01
    Counter=0;
  9e:	10 92 01 01 	sts	0x0101, r1
  a2:	10 92 00 01 	sts	0x0100, r1
    CLR_BIT(TCCR0A,WGM00);
  a6:	a4 e4       	ldi	r26, 0x44	; 68
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e4 e4       	ldi	r30, 0x44	; 68
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	8c 93       	st	X, r24
    CLR_BIT(TCCR0A,WGM01);
  b4:	a4 e4       	ldi	r26, 0x44	; 68
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e4 e4       	ldi	r30, 0x44	; 68
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B,WGM02);
  c2:	a5 e4       	ldi	r26, 0x45	; 69
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e5 e4       	ldi	r30, 0x45	; 69
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	8c 93       	st	X, r24
    SET_BIT(TCCR0B,CS00);
  d0:	a5 e4       	ldi	r26, 0x45	; 69
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e5 e4       	ldi	r30, 0x45	; 69
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B,CS01);
  de:	a5 e4       	ldi	r26, 0x45	; 69
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	e5 e4       	ldi	r30, 0x45	; 69
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8d 7f       	andi	r24, 0xFD	; 253
  ea:	8c 93       	st	X, r24
    SET_BIT(TCCR0B,CS02);
  ec:	a5 e4       	ldi	r26, 0x45	; 69
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e5 e4       	ldi	r30, 0x45	; 69
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	8c 93       	st	X, r24
    TCNT0=0;
  fa:	e6 e4       	ldi	r30, 0x46	; 70
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
    SET_BIT(TIMSK0,TOIE0);
 100:	ae e6       	ldi	r26, 0x6E	; 110
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ee e6       	ldi	r30, 0x6E	; 110
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	8c 93       	st	X, r24
    while(Counter<count1){}
 10e:	29 81       	ldd	r18, Y+1	; 0x01
 110:	3a 81       	ldd	r19, Y+2	; 0x02
 112:	80 91 00 01 	lds	r24, 0x0100
 116:	90 91 01 01 	lds	r25, 0x0101
 11a:	82 17       	cp	r24, r18
 11c:	93 07       	cpc	r25, r19
 11e:	b8 f3       	brcs	.-18     	; 0x10e <Delay_Timer+0x7e>

}
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	cf 91       	pop	r28
 126:	df 91       	pop	r29
 128:	08 95       	ret

0000012a <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
    cli();
 148:	f8 94       	cli
    Counter++;
 14a:	80 91 00 01 	lds	r24, 0x0100
 14e:	90 91 01 01 	lds	r25, 0x0101
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 01 01 	sts	0x0101, r25
 158:	80 93 00 01 	sts	0x0100, r24
    CLR_BIT(TIFR0,TOV0);
 15c:	a5 e3       	ldi	r26, 0x35	; 53
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e5 e3       	ldi	r30, 0x35	; 53
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	8c 93       	st	X, r24
    sei();
 16a:	78 94       	sei
    //reti();
}
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <main>:

#include "Intrheader.h"


int main(void)
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	00 d0       	rcall	.+0      	; 0x18c <main+0x6>
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
    //GPIO Configurations
    SET_BIT(DDRD,PD0);
 190:	aa e2       	ldi	r26, 0x2A	; 42
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	ea e2       	ldi	r30, 0x2A	; 42
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	8c 93       	st	X, r24
    SET_BIT(PORTD,PD0);
 19e:	ab e2       	ldi	r26, 0x2B	; 43
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	eb e2       	ldi	r30, 0x2B	; 43
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	8c 93       	st	X, r24
    CLR_BIT(DDRB,PB0);
 1ac:	a4 e2       	ldi	r26, 0x24	; 36
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	e4 e2       	ldi	r30, 0x24	; 36
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	8c 93       	st	X, r24
    SET_BIT(PORTB,PB0);
 1ba:	a5 e2       	ldi	r26, 0x25	; 37
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	e5 e2       	ldi	r30, 0x25	; 37
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	8c 93       	st	X, r24

    //Interrupts Initializations
    SET_BIT(SREG,7);
 1c8:	af e5       	ldi	r26, 0x5F	; 95
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	ef e5       	ldi	r30, 0x5F	; 95
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	8c 93       	st	X, r24
    SET_BIT(PCICR,PCIE0);
 1d6:	a8 e6       	ldi	r26, 0x68	; 104
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e8 e6       	ldi	r30, 0x68	; 104
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	8c 93       	st	X, r24
    SET_BIT(PCMSK0,PCINT0);
 1e4:	ab e6       	ldi	r26, 0x6B	; 107
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	eb e6       	ldi	r30, 0x6B	; 107
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8c 93       	st	X, r24

    FLAG_BIT.flag1=0;
 1f2:	80 91 02 01 	lds	r24, 0x0102
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	80 93 02 01 	sts	0x0102, r24
    int count1=1000/16;
 1fc:	8e e3       	ldi	r24, 0x3E	; 62
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	9a 83       	std	Y+2, r25	; 0x02
 202:	89 83       	std	Y+1, r24	; 0x01

    while(1)
    {
        if(FLAG_BIT.flag1)
 204:	80 91 02 01 	lds	r24, 0x0102
 208:	81 70       	andi	r24, 0x01	; 1
 20a:	88 23       	and	r24, r24
 20c:	69 f0       	breq	.+26     	; 0x228 <main+0xa2>
        {
            TOGGLE_BIT(PORTD,PD0);
 20e:	ab e2       	ldi	r26, 0x2B	; 43
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	eb e2       	ldi	r30, 0x2B	; 43
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	90 81       	ld	r25, Z
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	89 27       	eor	r24, r25
 21c:	8c 93       	st	X, r24
            Delay_Timer(count1);
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	0e 94 48 00 	call	0x90	; 0x90 <Delay_Timer>
 226:	ee cf       	rjmp	.-36     	; 0x204 <main+0x7e>
        }
        else
            CLR_BIT(PORTD,PD0);
 228:	ab e2       	ldi	r26, 0x2B	; 43
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	eb e2       	ldi	r30, 0x2B	; 43
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	8c 93       	st	X, r24
 236:	e6 cf       	rjmp	.-52     	; 0x204 <main+0x7e>

00000238 <__vector_3>:
    }
    return 0;
}

ISR(PCINT0_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	df 93       	push	r29
 248:	cf 93       	push	r28
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
    cli();
 24e:	f8 94       	cli
    FLAG_BIT.flag1=~FLAG_BIT.flag1;
 250:	80 91 02 01 	lds	r24, 0x0102
 254:	81 70       	andi	r24, 0x01	; 1
 256:	80 95       	com	r24
 258:	81 70       	andi	r24, 0x01	; 1
 25a:	98 2f       	mov	r25, r24
 25c:	91 70       	andi	r25, 0x01	; 1
 25e:	80 91 02 01 	lds	r24, 0x0102
 262:	8e 7f       	andi	r24, 0xFE	; 254
 264:	89 2b       	or	r24, r25
 266:	80 93 02 01 	sts	0x0102, r24
    sei();
 26a:	78 94       	sei
}
 26c:	cf 91       	pop	r28
 26e:	df 91       	pop	r29
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
